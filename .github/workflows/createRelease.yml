name: Generate Release Tag
on:
  push:
    branches:
      - main
jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"
          fetch-depth: 0

      - name: 安裝 GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Configure Git user as workflow actor
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Generate Tag and Release Notes
        id: generate
        run: |
          # Get today's date
          TODAY=$(date +"%Y%m%d")

          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${TODAY}-0")

          # Generate the new tag name
          TAG_NAME=$(echo $LAST_TAG | awk -F'-' -v today=$TODAY '{if ($1 == today) {printf "%s-%d", $1, $2 + 1} else {printf "%s-0", today}}')

          # Generate the changelog from commits
          if [ "$LAST_TAG" = "${TODAY}-0" ]; then
            CHANGES=$(git log --format="* %s by %an" | sed 's/@/ @/')
          else
            CHANGES=$(git log ${LAST_TAG}..HEAD --format="* %s by %an" | sed 's/@/ @/')
          fi

          # Output the variables for use in later steps
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "CHANGES=$CHANGES" >> $GITHUB_ENV

      - name: Create New Tag
        run: |
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:

      - name: Generate changelog
        run: |
          # 使用新標籤生成 changelog
          BANNER_INFO=""

          # 取得最後一次 release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG: $LAST_TAG"

          if [ -z "$LAST_TAG" ]; then
            COMMITS_INFO=$(git log --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only $(git rev-list --max-parents=0 HEAD) HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          else
            COMMITS_INFO=$(git log ${LAST_TAG}..HEAD --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only ${LAST_TAG} HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          fi

          echo -e "\n## Version"
          echo "\`\`\`"
          echo "$CHANGED_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              banner=$(head -n 2 "$file" | tail -n 1 | xargs)
              echo "$banner"
            fi
          done
          echo "\`\`\`"

          echo "## What's Changed"
          echo "$COMMITS_INFO" | while IFS= read -r line; do
            echo "* $line"
          done
