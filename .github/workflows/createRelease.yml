name: Generate Release Tag
on:
  push:
    branches:
      - main
jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"
          fetch-depth: 0

      - name: echo
        run: echo "$CHANGELOG"

      - name: Generate and push release tag
        run: |
          # 獲取當前日期
          TODAY=$(date +%Y%m%d)
          echo "Today's date: $TODAY"

          # 獲取最後一次 release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "Last tag: $LAST_TAG"

          if [[ -z "$LAST_TAG" ]]; then
            # 如果沒有標籤，創建今天的第一個標籤
            NEW_TAG="${TODAY}-0"
          else
            # 提取最後標籤的日期部分和後綴部分
            LAST_DATE=$(echo "$LAST_TAG" | cut -d'-' -f1)
            LAST_SUFFIX=$(echo "$LAST_TAG" | cut -d'-' -f2)

            if [[ "$LAST_DATE" == "$TODAY" ]]; then
              # 如果日期相同，增加後綴
              NEW_TAG="${TODAY}-$((LAST_SUFFIX + 1))"
            else
              # 如果日期不同，創建今天的第一個標籤
              NEW_TAG="${TODAY}-0"
            fi
          fi

          echo "New tag: $NEW_TAG"

          # 創建並推送標籤
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Generate changelog
        run: |
          # 使用新標籤生成 changelog
          BANNER_INFO=""

          # 取得最後一次 release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG: $LAST_TAG"

          if [ -z "$LAST_TAG" ]; then
            COMMITS_INFO=$(git log --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only $(git rev-list --max-parents=0 HEAD) HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          else
            COMMITS_INFO=$(git log ${LAST_TAG}..HEAD --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only ${LAST_TAG} HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          fi

          echo -e "\n## Version"
          echo "\`\`\`"
          echo "$CHANGED_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              banner=$(head -n 2 "$file" | tail -n 1 | xargs)
              echo "$banner"
            fi
          done
          echo "\`\`\`"

          echo "## What's Changed"
          echo "$COMMITS_INFO" | while IFS= read -r line; do
            echo "* $line"
          done
