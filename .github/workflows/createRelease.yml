name: Generate Release Tag
on:
  push:
    branches:
      - main
jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: "main"
          fetch-depth: 0
      - name: Generate and push release tag
        run: |
          # Generate new tag
          TODAY=$(date +"%Y%m%d")
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "${TODAY}-0")
          TAG_NAME=$(echo $LAST_TAG | awk -F'-' -v today=$TODAY '{if ($1 == today) {printf "%s-%d", $1, $2 + 1} else {printf "%s-0", today}}')

          # Create new tag
          git tag -a $TAG_NAME -m "Release $TAG_NAME"
          git push origin $TAG_NAME

          # Create release via GitHub API
          curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
              "tag_name": "'$TAG_NAME'",
              "target_commitish": "main",
              "name": "Release '$TAG_NAME'",
              "body": "Automatically generated release for '$TAG_NAME'",
              "draft": false,
              "prerelease": false
            }' \
            https://api.github.com/repos/${{ github.repository }}/releases

      - name: Generate changelog
        run: |
          # 使用新標籤生成 changelog
          BANNER_INFO=""

          # 取得最後一次 release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG: $LAST_TAG"

          if [ -z "$LAST_TAG" ]; then
            COMMITS_INFO=$(git log --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only $(git rev-list --max-parents=0 HEAD) HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          else
            COMMITS_INFO=$(git log ${LAST_TAG}..HEAD --format="%s@%an" | sed 's/@/ @/' | sort -u)
            CHANGED_FILES=$(git diff --name-only ${LAST_TAG} HEAD | grep "guoshipartners/static/js/.*\.js$" || true)
          fi

          echo -e "\n## Version"
          echo "\`\`\`"
          echo "$CHANGED_FILES" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              banner=$(head -n 2 "$file" | tail -n 1 | xargs)
              echo "$banner"
            fi
          done
          echo "\`\`\`"

          echo "## What's Changed"
          echo "$COMMITS_INFO" | while IFS= read -r line; do
            echo "* $line"
          done
